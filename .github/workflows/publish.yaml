# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# See template at: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

name: Upload Python Package

on: push

permissions:
  contents: write # Allow to commit and push.

jobs:

  #----------------------------------------------
  # Build the package
  build:
    name: Build
    # strategy:
    #   fail-fast: true
    #   matrix:
    #     os: [ "ubuntu-latest" ]
    #     python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    # runs-on: ${{ matrix.os }}
    runs-on: "ubuntu-latest"

    steps:
      #----------------------------------------------
      #       check-out repo
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #----------------------------------------------
      # Compute the version of the project based in the current checkout branch
      - name: Compute version
        id: compute-version
        uses: ./.github/workflows/compute-version    

      #----------------------------------------------
      # Display version
      - name: Display version
        run: "echo Version=${{ steps.compute-version.outputs.version }}"
        shell: bash

      #----------------------------------------------
      # Set the package version
      - name: Set package version
        run: echo "PACKAGE_VERSION=${{ steps.compute-version.outputs.version }}" >> $GITHUB_ENV

      #----------------------------------------------
      # Install envsubst
      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      #----------------------------------------------
      # Replace version in pyproject.toml, config.yaml and build.yaml
      - name: Replace version
        run: |
          envsubst < pyproject.template.toml > pyproject.toml
          envsubst < addons/gazpar2haws/config.template.yaml > addons/gazpar2haws/config.yaml
          envsubst < addons/gazpar2haws/build.template.yaml > addons/gazpar2haws/build.yaml

      #----------------------------------------------
      # Commit the changes
      - name: Commit changes
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          git add pyproject.toml addons/gazpar2haws/config.yaml addons/gazpar2haws/build.yaml 
          git commit -m "Upgrade version to ${PACKAGE_VERSION}"
          git push

      #----------------------------------------------
      #       set-up python
      # - name: Set up python ${{ matrix.python-version }}
      #   id: setup-python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.0.0
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv

      #----------------------------------------------
      #       load cached venv if cache exists
      # - name: Load cached venv
      #   id: cached-poetry-dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: .venv
      #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      # - name: Install dependencies
      #   if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #   run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      # - name: Install library
      #   run: poetry install --no-interaction

      #----------------------------------------------
      - name: Build package
        run: poetry build

      #----------------------------------------------
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: gazpar2haws
          path: dist/

  #----------------------------------------------
  # Publish to TestPyPI          
  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: "ubuntu-latest"
    needs: build

    environment:
      name: testpypi
      url: https://test.pypi.org/p/gazpar2haws
  
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      #----------------------------------------------
      #       check-out repo
      # - name: Check out repository
      #   uses: actions/checkout@v4

      # - uses: ./.github/workflows/publish-to-testpypi
      #   with:
      #     package-name: gazpar2haws
      - name: Download the package
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.package-name }}
          path: dist/
      - name: Publish ðŸ“¦ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true