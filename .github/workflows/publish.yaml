# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# See template at: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

name: Upload Python Package

on: push

permissions:
  contents: write # Allow to commit and push.

jobs:
  build:
    # strategy:
    #   fail-fast: true
    #   matrix:
    #     os: [ "ubuntu-latest" ]
    #     python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    # runs-on: ${{ matrix.os }}
    runs-on: "ubuntu-latest"

    steps:
      #----------------------------------------------
      #       check-out repo
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #----------------------------------------------
      # GitVersion setup : see examples at https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/setup.md
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.1
        with:
          versionSpec: '6.0.x'

      #----------------------------------------------
      # GitVersion execution : see examples at https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/execute/usage-examples.md
      - name: Determine Version
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v3.1.1
        with:
          useConfigFile: true
          configFilePath: gitversion.yaml

      #----------------------------------------------
      # Display GitVersion outputs
      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"              

      #----------------------------------------------
      # Set the package version
      - name: Set package version
        env:
          PACKAGE_VERSION: ${{ steps.gitversion.outputs.informationalVersion }}
        run: echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      #----------------------------------------------
      # Install envsubst
      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      #----------------------------------------------
      # Replace placeholders in pyproject.toml, config.yaml and build.yaml
      - name: Replace placeholders
        run: |
          envsubst < pyproject.template.toml > pyproject.toml
          envsubst < addons/gazpar2haws/config.template.yaml > addons/gazpar2haws/config.yaml
          envsubst < addons/gazpar2haws/build.template.yaml > addons/gazpar2haws/build.yaml

      #----------------------------------------------
      # Commit the changes
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add pyproject.toml addons/gazpar2haws/config.yaml addons/gazpar2haws/build.yaml 
          git commit -m "Upgrade version to ${PACKAGE_VERSION}"
          git push

      #----------------------------------------------
      #       set-up python
      # - name: Set up python ${{ matrix.python-version }}
      #   id: setup-python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.0.0
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv

      #----------------------------------------------
      #       load cached venv if cache exists
      # - name: Load cached venv
      #   id: cached-poetry-dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: .venv
      #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      # - name: Install dependencies
      #   if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #   run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      # - name: Install library
      #   run: poetry install --no-interaction

      #----------------------------------------------
      - name: Build release distributions
        run: poetry build

      #----------------------------------------------
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs:
    - build

    runs-on: "ubuntu-latest"

    environment:
      name: testpypi
      url: https://test.pypi.org/p/gazpar2haws

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: package
        path: dist/

    - name: Publish üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true

